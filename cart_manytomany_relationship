// app.js file
const path = require('path');

const express = require('express');
const bodyParser = require('body-parser');

const errorController = require('./controllers/error');
const sequelize=require('./util/database');
const Product=require('./models/product');
const User=require('./models/user');
const Cart = require('./models/cart');
const CartItem = require('./models/cart-item');

const cors=require('cors');

const app = express();

const adminRoutes = require('./routes/admin');
const shopRoutes = require('./routes/shop');
app.use(cors());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.static(path.join(__dirname, 'public')));

app.use((req,res,next)=>{
  User.findOne({where: {id:1}}).then(user=>{
    req.user=user;
    console.log(req.user)
    next();
  }).catch(err=>console.log(err));
}); 


app.use('/admin', adminRoutes);
app.use(shopRoutes);

app.use(errorController.get404);

Product.belongsTo(User, {constraints: true, onDelete:'CASCADE'});
User.hasMany(Product);
User.hasOne(Cart);
Cart.belongsTo(User);
Cart.belongsToMany(Product, { through: CartItem });
Product.belongsToMany(Cart, { through: CartItem });

sequelize
  //.sync({force: true}) //it is create everytime new tables every time collapse data
  .sync()
  .then(result => {
    //console.log(result);
    return User.findOne({where :{id:1}})}).then(user=>{
      if(!user){
        return User.create({name:'naveen', email:'naveen@gmail.com'});
      }
      return user;
    }) .then(user => {
      // console.log(user);
      return user.createCart();
    })
    .then(cart => {
        app.listen(2000);
  })
  .catch(err => {
    console.log(err);
  });

///shop.js file in routes

const path = require('path');

const express = require('express');

const shopController = require('../controllers/shop');

const router = express.Router();

router.get('/', shopController.getIndex);

router.get('/products', shopController.getProducts);

router.get('/products/:productId',shopController.getProduct);
router.get('/cart', shopController.getCart);
router.post('/cart', shopController.postCart);
router.post('/cart-delete-item', shopController.postCartDeleteProduct);
router.get('/orders', shopController.getOrders);
router.get('/checkout', shopController.getCheckout);

module.exports = router;

///shop.js file in controllers

const path = require('path');
const Product=require('../models/product');
const rootdir=require('../util/path');

exports.getProducts= (req, res, next)=>{
  Product.findAll()
    .then(products => {
      console.log(products);
      res.sendFile(path.join(rootdir ,'views', '/shop/product-list.html'));
    })
    .catch(err => {
      console.log(err);
    });
};

exports.getProduct = (req, res, next) => {
  const prodId= req.params.productId;
   // Product.findAll({ where: { id: prodId } })
  //   .then(products => {
  //     res.render('shop/product-detail', {
  //       product: products[0],
  //       pageTitle: products[0].title,
  //       path: '/products'
  //     });
  //   })
  //   .catch(err => console.log(err));
  Product.findById(prodId).then(product=>{
    console.log(product);
    res.sendFile(path.join(rootdir ,'views', '/shop/product-details.html'));
  }).catch(err=>console.log(err));
  
};

exports.getIndex = (req, res, next) => {
  Product.findAll()
    .then(products => {
      console.log(products);
      res.sendFile(path.join(rootdir ,'views', '/shop/index.html'));
    })
    .catch(err => {
      console.log(err);
    });    
};

exports.getCart = (req, res, next) => {
  req.user
    .getCart()
    .then(cart => {
      return cart
        .getProducts()
        .then(products => {
          res.sendFile(path.join(rootdir ,'views', '/shop/cart.html'));
        })
        .catch(err => console.log(err));
    })
    .catch(err => console.log(err));
};

exports.postCart = (req, res, next) => {
  const prodId = req.body.productId;
  let fetchedCart;
  let newQuantity = 1;
  req.user
    .getCart()
    .then(cart => {
      fetchedCart = cart;
      return cart.getProducts({ where: { id: prodId } });
    })
    .then(products => {
      let product;
      if (products.length > 0) {
        product = products[0];
      }

      if (product) {
        const oldQuantity = product.cartItem.quantity;
        newQuantity = oldQuantity + 1;
        return product;
      }
      return Product.findById(prodId);
    })
    .then(product => {
      return fetchedCart.addProduct(product, {
        through: { quantity: newQuantity }
      });
    })
    .then(() => {
      res.redirect('/cart');
    })
    .catch(err => console.log(err));
};


exports.postCartDeleteProduct = (req, res, next) => {
  const prodId = req.body.productId;
  req.user
    .getCart()
    .then(cart => {
      return cart.getProducts({ where: { id: prodId } });
    })
    .then(products => {
      const product = products[0];
      return product.cartItem.destroy();
    })
    .then(result => {
      res.redirect('/cart');
    })
    .catch(err => console.log(err));
};

exports.getOrders = (req, res, next) => {
  res.sendFile(path.join(rootdir ,'views', '/shop/orders.html'));
};
exports.getCheckout = (req, res, next) => {
  res.sendFile(path.join(rootdir ,'views', '/shop/checkout.html'));
};

////cart.js file in models


const path = require('path');
const Sequelize = require('sequelize');

const sequelize = require('../util/database');

const Cart = sequelize.define('cart', {
  id: {
    type: Sequelize.INTEGER,
    autoIncrement: true,
    allowNull: false,
    primaryKey: true
  }
});

module.exports = Cart;

///cart-item.js file in models

const Sequelize = require('sequelize');

const sequelize = require('../util/database');

const CartItem = sequelize.define('cartItem', {
  id: {
    type: Sequelize.INTEGER,
    autoIncrement: true,
    allowNull: false,
    primaryKey: true
  },
  quantity: Sequelize.INTEGER
});

module.exports = CartItem;


